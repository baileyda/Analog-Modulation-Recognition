/* -*- c++ -*- */
/* 
 * Copyright 2015 <+YOU OR YOUR COMPANY+>.
 * 
 * This is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3, or (at your option)
 * any later version.
 * 
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this software; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street,
 * Boston, MA 02110-1301, USA.
 */

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <gnuradio/io_signature.h>
#include "find_carrier_impl.h"

namespace gr {
  namespace AMR {

    find_carrier::sptr
    find_carrier::make(int vlen, int samp_rate)
    {
      return gnuradio::get_initial_sptr
        (new find_carrier_impl(vlen, samp_rate));
    }

    find_carrier_impl::find_carrier_impl(int vlen, int samp_rate)
      : gr::sync_block("find_carrier",
              gr::io_signature::make(1, 1, sizeof(float)*vlen),
              gr::io_signature::make(2, 2, sizeof(float))),
        p_samp_rate(samp_rate),
        p_vlen(vlen)
    {
        set_max_noutput_items(1);    
    }

    /*
     * Our virtual destructor.
     */
    find_carrier_impl::~find_carrier_impl()
    {
    }

    int
    find_carrier_impl::work(int noutput_items,
			  gr_vector_const_void_star &input_items,
			  gr_vector_void_star &output_items)
    {
        const float *in = (const float *) input_items[0];
        float *fc = (float *) output_items[0];
        float *gamma_max = (float *) output_items[1];

        float max = 0;
        int sample = 0;
        for (int i = 0; i < p_vlen/2; i++)
        {
            if (in[i] > max)
            {
                max = in[i];
                sample = i;
            }
        }

        *fc = sample * p_samp_rate / p_vlen;
        *Nc = (float) sample;
        *gamma_max = pow(max,2);
       

        // Tell runtime system how many output items we produced.
        return noutput_items;
    }

  } /* namespace AMR */
} /* namespace gr */

